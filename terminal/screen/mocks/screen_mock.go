// Code generated by mockery v2.53.3. DO NOT EDIT.

package screenmock

import (
	io "github.com/hnimtadd/termio/io"
	page "github.com/hnimtadd/termio/terminal/page"
	point "github.com/hnimtadd/termio/terminal/point"
	screen "github.com/hnimtadd/termio/terminal/screen"
	sgr "github.com/hnimtadd/termio/terminal/sgr"
	size "github.com/hnimtadd/termio/terminal/size"
	mock "github.com/stretchr/testify/mock"
)

// MockScreen is an autogenerated mock type for the ScreenInt type
type MockScreen struct {
	mock.Mock
}

// AssertIntegrity provides a mock function with no fields
func (_m *MockScreen) AssertIntegrity() {
	_m.Called()
}

// ClearCells provides a mock function with given fields: _a0, row, fromX, toX
func (_m *MockScreen) ClearCells(
	_a0 *page.Page,
	row *page.Row,
	fromX size.CellCountInt,
	toX size.CellCountInt,
) {
	_m.Called(_a0, row, fromX, toX)
}

// ClearRows provides a mock function with given fields: tl, bl
func (_m *MockScreen) ClearRows(tl point.Point, bl *point.Point) {
	_m.Called(tl, bl)
}

// CursorCellEndOfPrevious provides a mock function with no fields
func (_m *MockScreen) CursorCellEndOfPrevious() *page.Cell {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CursorCellEndOfPrevious")
	}

	var r0 *page.Cell
	if rf, ok := ret.Get(0).(func() *page.Cell); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*page.Cell)
		}
	}

	return r0
}

// CursorCellLeft provides a mock function with given fields: n
func (_m *MockScreen) CursorCellLeft(n size.CellCountInt) *page.Cell {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for CursorCellLeft")
	}

	var r0 *page.Cell
	if rf, ok := ret.Get(0).(func(size.CellCountInt) *page.Cell); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*page.Cell)
		}
	}

	return r0
}

// CursorCellRight provides a mock function with given fields: n
func (_m *MockScreen) CursorCellRight(n size.CellCountInt) *page.Cell {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for CursorCellRight")
	}

	var r0 *page.Cell
	if rf, ok := ret.Get(0).(func(size.CellCountInt) *page.Cell); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*page.Cell)
		}
	}

	return r0
}

// CursorMarkDirty provides a mock function with no fields
func (_m *MockScreen) CursorMarkDirty() {
	_m.Called()
}

// DumpString provides a mock function with given fields: writer, tl
func (_m *MockScreen) DumpString(writer io.Writer, tl point.Tag) error {
	ret := _m.Called(writer, tl)

	if len(ret) == 0 {
		panic("no return value specified for DumpString")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, point.Tag) error); ok {
		r0 = rf(writer, tl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCursor provides a mock function with no fields
func (_m *MockScreen) GetCursor() *screen.Cursor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCursor")
	}

	var r0 *screen.Cursor
	if rf, ok := ret.Get(0).(func() *screen.Cursor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*screen.Cursor)
		}
	}

	return r0
}

// GetSize provides a mock function with no fields
func (_m *MockScreen) GetSize() (size.CellCountInt, size.CellCountInt) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 size.CellCountInt
	var r1 size.CellCountInt
	if rf, ok := ret.Get(0).(func() (size.CellCountInt, size.CellCountInt)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() size.CellCountInt); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(size.CellCountInt)
	}

	if rf, ok := ret.Get(1).(func() size.CellCountInt); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(size.CellCountInt)
	}

	return r0, r1
}

// Reset provides a mock function with no fields
func (_m *MockScreen) Reset() {
	_m.Called()
}

// ResizeWithReflow provides a mock function with given fields: cols, rows
func (_m *MockScreen) ResizeWithReflow(cols size.CellCountInt, rows size.CellCountInt) {
	_m.Called(cols, rows)
}

// ResizeWithoutReflow provides a mock function with given fields: cols, rows
func (_m *MockScreen) ResizeWithoutReflow(cols size.CellCountInt, rows size.CellCountInt) {
	_m.Called(cols, rows)
}

// SetCursorAbs provides a mock function with given fields: x, y
func (_m *MockScreen) SetCursorAbs(x size.CellCountInt, y size.CellCountInt) {
	_m.Called(x, y)
}

// SetCursorDown provides a mock function with given fields: n
func (_m *MockScreen) SetCursorDown(n size.CellCountInt) {
	_m.Called(n)
}

// SetCursorHorizontalAbs provides a mock function with given fields: x
func (_m *MockScreen) SetCursorHorizontalAbs(x size.CellCountInt) {
	_m.Called(x)
}

// SetCursorLeft provides a mock function with given fields: n
func (_m *MockScreen) SetCursorLeft(n size.CellCountInt) {
	_m.Called(n)
}

// SetCursorRight provides a mock function with given fields: n
func (_m *MockScreen) SetCursorRight(n size.CellCountInt) {
	_m.Called(n)
}

// SetCursorScrollUp provides a mock function with no fields
func (_m *MockScreen) SetCursorScrollUp() {
	_m.Called()
}

// SetCursorUp provides a mock function with given fields: n
func (_m *MockScreen) SetCursorUp(n size.CellCountInt) {
	_m.Called(n)
}

// SetCursorVerticalAbs provides a mock function with given fields: y
func (_m *MockScreen) SetCursorVerticalAbs(y size.CellCountInt) {
	_m.Called(y)
}

// SetGraphicsRendition provides a mock function with given fields: _a0
func (_m *MockScreen) SetGraphicsRendition(_a0 *sgr.Attribute) {
	_m.Called(_a0)
}

// SplitCellBoundary provides a mock function with given fields: x
func (_m *MockScreen) SplitCellBoundary(x size.CellCountInt) {
	_m.Called(x)
}

// NewMockScreen creates a new instance of MockScreen. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScreen(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockScreen {
	mock := &MockScreen{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
